{
  "openapi": "3.0.0",
  "paths": {
    "/auth/register": {
      "post": {
        "operationId": "register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RegisterDto" } } }
        },
        "responses": {
          "201": {
            "description": "Registered user",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/User" } } }
          },
          "400": { "description": "Invalid register data" },
          "409": { "description": "User with given email already exists" }
        },
        "tags": ["auth"]
      }
    },
    "/auth/send-verification-code": {
      "post": {
        "operationId": "sendVerificationCode",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SendVerificationCodeDto" } } }
        },
        "responses": {
          "201": {
            "description": "Send Verification Code to User",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SendVerificationCodeDto" } } }
          },
          "400": { "description": "Invalid Email" },
          "409": { "description": "User with given email does not exists" }
        },
        "tags": ["auth"]
      }
    },
    "/auth/verify-code": {
      "post": {
        "operationId": "verifyCode",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SendVerificationCodeDto" } } }
        },
        "responses": {
          "201": {
            "description": "Send Verification Code to User",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SendVerificationCodeDto" } } }
          },
          "400": { "description": "Invalid Email" },
          "409": { "description": "User with given email does not exists" }
        },
        "tags": ["auth"]
      }
    },
    "/auth/login": {
      "post": {
        "operationId": "login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LoginDto" } } }
        },
        "responses": {
          "201": {
            "description": "Logged in user",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PickTypeClass" } } }
          },
          "401": { "description": "Invalid credentials" }
        },
        "tags": ["auth"]
      }
    },
    "/auth/logout": {
      "post": {
        "operationId": "logout",
        "parameters": [],
        "responses": { "201": { "description": "User logged out" }, "401": { "description": "User is not logged in" } },
        "tags": ["auth"]
      }
    },
    "/users/me": {
      "get": {
        "operationId": "getCurrentUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Currently logged in user",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/User" } } }
          },
          "401": { "description": "User is not logged in" }
        },
        "tags": ["users"]
      }
    },
    "/users": {
      "get": {
        "operationId": "getUsers",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all users",
            "content": {
              "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/User" } } }
            }
          },
          "401": { "description": "User is not logged in" }
        },
        "tags": ["users"]
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "getUser",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "responses": {
          "200": {
            "description": "User with given id",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/User" } } }
          },
          "401": { "description": "User is not logged in" }
        },
        "tags": ["users"]
      },
      "patch": {
        "operationId": "updateUser",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserUpdateDto" } } }
        },
        "responses": {
          "200": {
            "description": "User successfully updated",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/User" } } }
          },
          "400": { "description": "Invalid update data" },
          "401": { "description": "User is not logged in" },
          "404": { "description": "User not found" }
        },
        "tags": ["users"]
      },
      "delete": {
        "operationId": "deleteUser",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "responses": {
          "200": { "description": "User successfully deleted" },
          "401": { "description": "User is not logged in" },
          "404": { "description": "User not found" }
        },
        "tags": ["users"]
      }
    },
    "/codes": {
      "get": {
        "operationId": "getCodes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all codes",
            "content": {
              "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Code" } } }
            }
          },
          "401": { "description": "Code is not logged in" }
        },
        "tags": ["codes"]
      }
    },
    "/codes/{id}": {
      "get": {
        "operationId": "getCode",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "responses": {
          "200": {
            "description": "Code with given id",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Code" } } }
          },
          "401": { "description": "Code is not logged in" }
        },
        "tags": ["codes"]
      },
      "patch": {
        "operationId": "updateCode",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CodeUpdateDto" } } }
        },
        "responses": {
          "200": {
            "description": "Code successfully updated",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Code" } } }
          },
          "400": { "description": "Invalid update data" },
          "401": { "description": "Code is not logged in" },
          "404": { "description": "Code not found" }
        },
        "tags": ["codes"]
      },
      "delete": {
        "operationId": "deleteCode",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "responses": {
          "200": { "description": "Code successfully deleted" },
          "401": { "description": "Code is not logged in" },
          "404": { "description": "Code not found" }
        },
        "tags": ["codes"]
      }
    },
    "/settings": {
      "get": {
        "operationId": "getSettings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all settings",
            "content": {
              "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Setting" } } }
            }
          }
        },
        "tags": ["settings"]
      },
      "post": {
        "operationId": "createSetting",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SettingCreateDto" } } }
        },
        "responses": {
          "201": {
            "description": "Setting created",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Setting" } } }
          },
          "400": { "description": "Invalid setting data" },
          "401": { "description": "User not logged in" },
          "403": { "description": "User not authorized" },
          "409": { "description": "Setting with given name already exists" }
        },
        "tags": ["settings"]
      }
    },
    "/settings/{id}": {
      "get": {
        "operationId": "getSetting",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "responses": {
          "200": {
            "description": "Setting with given id",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Setting" } } }
          },
          "404": { "description": "Setting not found" }
        },
        "tags": ["settings"]
      },
      "patch": {
        "operationId": "updateSetting",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SettingUpdateDto" } } }
        },
        "responses": {
          "200": {
            "description": "Setting updated",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Setting" } } }
          },
          "400": { "description": "Invalid setting data" },
          "401": { "description": "User not logged in" },
          "403": { "description": "User not authorized" },
          "404": { "description": "Setting not found" }
        },
        "tags": ["settings"]
      },
      "delete": {
        "operationId": "deleteSetting",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "responses": {
          "200": { "description": "Setting deleted" },
          "401": { "description": "User not logged in" },
          "403": { "description": "User not authorized" },
          "404": { "description": "Setting not found" }
        },
        "tags": ["settings"]
      }
    },
    "/settings/{name}/value": {
      "get": {
        "operationId": "getSettingValueByName",
        "parameters": [{ "name": "name", "required": true, "in": "path", "schema": { "type": "string" } }],
        "responses": {
          "200": {
            "description": "Value of the setting with given name",
            "content": { "application/json": { "schema": { "type": "string" } } }
          },
          "404": { "description": "Setting not found" }
        },
        "tags": ["settings"]
      }
    },
    "/attribute-types": {
      "get": {
        "operationId": "getAttributeTypes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of attribute types",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/AttributeType" } }
              }
            }
          },
          "403": { "description": "User not authorized" }
        },
        "tags": ["attribute types"]
      },
      "post": {
        "operationId": "createAttributeType",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AttributeTypeDto" } } }
        },
        "responses": {
          "201": {
            "description": "Attribute type created",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AttributeType" } } }
          },
          "400": { "description": "Invalid attribute type data" },
          "403": { "description": "User not authorized" }
        },
        "tags": ["attribute types"]
      }
    },
    "/attribute-types/{id}": {
      "put": {
        "operationId": "updateAttributeType",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AttributeTypeDto" } } }
        },
        "responses": {
          "200": {
            "description": "Attribute type updated",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AttributeType" } } }
          },
          "400": { "description": "Invalid attribute type data" },
          "403": { "description": "User not authorized" },
          "404": { "description": "Attribute type not found" }
        },
        "tags": ["attribute types"]
      },
      "delete": {
        "operationId": "deleteAttributeType",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "responses": {
          "200": { "description": "Attribute type deleted" },
          "403": { "description": "User not authorized" },
          "404": { "description": "Attribute type not found" }
        },
        "tags": ["attribute types"]
      }
    },
    "/categories": {
      "get": {
        "operationId": "getCategories",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all categories",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Category" } }
              }
            }
          }
        },
        "tags": ["categories"]
      },
      "post": {
        "operationId": "createCategory",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CategoryCreateDto" } } }
        },
        "responses": {
          "201": {
            "description": "Category created",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Category" } } }
          },
          "400": { "description": "Invalid category data" }
        },
        "tags": ["categories"]
      }
    },
    "/categories/groups": {
      "get": {
        "operationId": "getCategoryGroups",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all category groups",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/CategoryGroup" } }
              }
            }
          }
        },
        "tags": ["categories"]
      }
    },
    "/categories/{id}": {
      "get": {
        "operationId": "getCategory",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "responses": {
          "200": {
            "description": "Category with given id",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Category" } } }
          },
          "404": { "description": "Category not found" }
        },
        "tags": ["categories"]
      },
      "patch": {
        "operationId": "updateCategory",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CategoryUpdateDto" } } }
        },
        "responses": {
          "200": {
            "description": "Category updated",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Category" } } }
          },
          "400": { "description": "Invalid category data" },
          "404": { "description": "Category not found" }
        },
        "tags": ["categories"]
      },
      "delete": {
        "operationId": "deleteCategory",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "responses": {
          "200": {
            "description": "Category deleted",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Category" } } }
          },
          "404": { "description": "Category not found" }
        },
        "tags": ["categories"]
      }
    },
    "/categories/{id}/products": {
      "get": {
        "operationId": "getCategoryProducts",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "responses": {
          "200": {
            "description": "Category products",
            "content": {
              "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Product" } } }
            }
          },
          "404": { "description": "Category not found" }
        },
        "tags": ["categories"]
      },
      "post": {
        "operationId": "addCategoryProduct",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "productId": { "type": "number" } },
                "required": ["productId"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product added to category",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Product" } } }
          },
          "404": { "description": "Category not found" }
        },
        "tags": ["categories"]
      }
    },
    "/categories/slug/{slug}/products": {
      "get": {
        "operationId": "getCategoryProductsBySlug",
        "parameters": [{ "name": "slug", "required": true, "in": "path", "schema": { "type": "string" } }],
        "responses": {
          "200": {
            "description": "Category products by slug",
            "content": {
              "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Product" } } }
            }
          },
          "404": { "description": "Category not found" }
        },
        "tags": ["categories"]
      }
    },
    "/categories/{id}/products/{productId}": {
      "delete": {
        "operationId": "deleteCategoryProduct",
        "parameters": [
          { "name": "id", "required": true, "in": "path", "schema": { "type": "number" } },
          { "name": "productId", "required": true, "in": "path", "schema": { "type": "number" } }
        ],
        "responses": {
          "200": { "description": "Product deleted from category" },
          "404": { "description": "Category not found" }
        },
        "tags": ["categories"]
      }
    },
    "/products": {
      "get": {
        "operationId": "getProducts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all products",
            "content": {
              "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Product" } } }
            }
          }
        },
        "tags": ["products"]
      },
      "post": {
        "operationId": "createProduct",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProductCreateDto" } } }
        },
        "responses": {
          "201": {
            "description": "Product created",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Product" } } }
          },
          "400": { "description": "Invalid product data" },
          "401": { "description": "User not logged in" },
          "403": { "description": "User not authorized" }
        },
        "tags": ["products"]
      }
    },
    "/products/{id}": {
      "get": {
        "operationId": "getProduct",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "responses": {
          "200": {
            "description": "Product with given id",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Product" } } }
          },
          "404": { "description": "Product not found" }
        },
        "tags": ["products"]
      },
      "patch": {
        "operationId": "updateProduct",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProductUpdateDto" } } }
        },
        "responses": {
          "200": {
            "description": "Product updated",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Product" } } }
          },
          "400": { "description": "Invalid product data" },
          "401": { "description": "User not logged in" },
          "403": { "description": "User not authorized" },
          "404": { "description": "Product not found" }
        },
        "tags": ["products"]
      },
      "delete": {
        "operationId": "deleteProduct",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "responses": {
          "200": { "description": "Product deleted" },
          "401": { "description": "User not logged in" },
          "403": { "description": "User not authorized" },
          "404": { "description": "Product not found" }
        },
        "tags": ["products"]
      }
    },
    "/products/{id}/attributes": {
      "patch": {
        "operationId": "updateProductAttributes",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "$ref": "#/components/schemas/AttributeDto" } }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product attributes updated",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Product" } } }
          },
          "401": { "description": "User not logged in" },
          "403": { "description": "User not authorized" },
          "404": { "description": "Product not found" }
        },
        "tags": ["products"]
      }
    },
    "/products/dashboard/low-stock": {
      "get": {
        "operationId": "getLowStockProductsCount",
        "parameters": [{ "name": "quantity", "required": true, "in": "query", "schema": { "type": "number" } }],
        "responses": { "200": { "description": "" } },
        "tags": ["products"]
      }
    },
    "/products/{id}/photos/{photoId}": {
      "get": {
        "operationId": "getProductPhoto",
        "parameters": [
          { "name": "id", "required": true, "in": "path", "schema": { "type": "number" } },
          { "name": "photoId", "required": true, "in": "path", "schema": { "type": "number" } },
          { "name": "thumbnail", "required": true, "in": "query", "schema": { "type": "boolean" } }
        ],
        "responses": {
          "200": {
            "description": "Product photo with given id",
            "content": { "image/*": { "schema": { "type": "string", "format": "binary" } } }
          },
          "404": { "description": "Product photo not found" }
        },
        "tags": ["products"]
      },
      "delete": {
        "operationId": "deleteProductPhoto",
        "parameters": [
          { "name": "id", "required": true, "in": "path", "schema": { "type": "number" } },
          { "name": "photoId", "required": true, "in": "path", "schema": { "type": "number" } }
        ],
        "responses": {
          "200": {
            "description": "Product photo deleted",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Product" } } }
          },
          "404": { "description": "Product not found" }
        },
        "tags": ["products"]
      }
    },
    "/products/{id}/photos": {
      "post": {
        "operationId": "addProductPhoto",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": { "type": "object", "properties": { "file": { "type": "string", "format": "binary" } } }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product photo added",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Product" } } }
          },
          "404": { "description": "Product not found" }
        },
        "tags": ["products"]
      }
    },
    "/shops": {
      "post": {
        "operationId": "createShop",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ShopCreateDto" } } }
        },
        "responses": {
          "201": {
            "description": "Shop created",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Shop" } } }
          },
          "400": { "description": "Invalid shop data" },
          "404": { "description": "Product not found" }
        },
        "tags": ["shops"]
      },
      "get": {
        "operationId": "getShops",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all shops",
            "content": {
              "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Shop" } } }
            }
          }
        },
        "tags": ["shops"]
      }
    },
    "/shops/{id}": {
      "patch": {
        "operationId": "updateShop",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ShopUpdateDto" } } }
        },
        "responses": {
          "200": {
            "description": "Shop updated",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Shop" } } }
          },
          "400": { "description": "Invalid shop data" },
          "404": { "description": "Shop not found" }
        },
        "tags": ["shops"]
      }
    },
    "/products/{productId}/ratings": {
      "get": {
        "operationId": "getProductRatings",
        "parameters": [{ "name": "productId", "required": true, "in": "path", "schema": { "type": "number" } }],
        "responses": {
          "200": {
            "description": "List or ratings for given product",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ProductRating" } }
              }
            }
          },
          "404": { "description": "Product not found" }
        },
        "tags": ["product ratings"]
      },
      "post": {
        "operationId": "createProductRating",
        "parameters": [{ "name": "productId", "required": true, "in": "path", "schema": { "type": "number" } }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProductRatingDto" } } }
        },
        "responses": {
          "201": {
            "description": "Product rating created",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProductRating" } } }
          },
          "400": { "description": "Invalid rating data" },
          "404": { "description": "Product not found" }
        },
        "tags": ["product ratings"]
      }
    },
    "/products/{productId}/ratings/{id}": {
      "put": {
        "operationId": "updateProductRating",
        "parameters": [
          { "name": "productId", "required": true, "in": "path", "schema": { "type": "number" } },
          { "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProductRatingDto" } } }
        },
        "responses": {
          "200": {
            "description": "Product rating updated",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProductRating" } } }
          },
          "400": { "description": "Invalid rating data" },
          "404": { "description": "Product rating not found" }
        },
        "tags": ["product ratings"]
      },
      "delete": {
        "operationId": "deleteProductRating",
        "parameters": [
          { "name": "productId", "required": true, "in": "path", "schema": { "type": "number" } },
          { "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }
        ],
        "responses": {
          "200": { "description": "Product rating deleted" },
          "404": { "description": "Product rating not found" }
        },
        "tags": ["product ratings"]
      }
    },
    "/products/{productId}/ratings/{id}/photos/{photoId}": {
      "get": {
        "operationId": "getProductRatingPhoto",
        "parameters": [
          { "name": "productId", "required": true, "in": "path", "schema": { "type": "number" } },
          { "name": "id", "required": true, "in": "path", "schema": { "type": "number" } },
          { "name": "photoId", "required": true, "in": "path", "schema": { "type": "number" } },
          { "name": "thumbnail", "required": true, "in": "query", "schema": { "type": "boolean" } }
        ],
        "responses": {
          "200": {
            "description": "Product rating photo with given id",
            "content": { "image/*": { "schema": { "type": "string", "format": "binary" } } }
          },
          "404": { "description": "Product rating photo not found" }
        },
        "tags": ["product ratings"]
      },
      "delete": {
        "operationId": "deleteProductRatingPhoto",
        "parameters": [
          { "name": "productId", "required": true, "in": "path", "schema": { "type": "number" } },
          { "name": "id", "required": true, "in": "path", "schema": { "type": "number" } },
          { "name": "photoId", "required": true, "in": "path", "schema": { "type": "number" } }
        ],
        "responses": {
          "200": {
            "description": "Product rating photo deleted",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProductRating" } } }
          },
          "401": { "description": "User not logged in" },
          "403": { "description": "User not authorized" },
          "404": { "description": "Product rating not found" }
        },
        "tags": ["product ratings"]
      }
    },
    "/products/{productId}/ratings/{id}/photos": {
      "post": {
        "operationId": "addProductRatingPhoto",
        "parameters": [
          { "name": "productId", "required": true, "in": "path", "schema": { "type": "number" } },
          { "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": { "type": "object", "properties": { "file": { "type": "string", "format": "binary" } } }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product rating photo added",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProductRating" } } }
          },
          "401": { "description": "User not logged in" },
          "403": { "description": "User not authorized" },
          "404": { "description": "Product rating not found" }
        },
        "tags": ["product ratings"]
      }
    },
    "/faqs": {
      "get": {
        "operationId": "getFaqs",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all Faqs",
            "content": {
              "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Faq" } } }
            }
          }
        },
        "tags": ["faqs"]
      },
      "post": {
        "operationId": "createFaq",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FaqCreateDto" } } }
        },
        "responses": {
          "201": {
            "description": "Faq created",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Faq" } } }
          },
          "400": { "description": "Invalid Faq data" }
        },
        "tags": ["faqs"]
      }
    },
    "/faqs/{id}": {
      "get": {
        "operationId": "getFaq",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "responses": {
          "200": {
            "description": "Faq with given id",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Faq" } } }
          },
          "404": { "description": "Faq not found" }
        },
        "tags": ["faqs"]
      },
      "patch": {
        "operationId": "updateFaq",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FaqUpdateDto" } } }
        },
        "responses": {
          "200": {
            "description": "Faq updated",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Faq" } } }
          },
          "400": { "description": "Invalid Faq data" },
          "404": { "description": "Faq not found" }
        },
        "tags": ["faqs"]
      },
      "delete": {
        "operationId": "deleteFaq",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "responses": { "200": { "description": "Faq deleted" }, "404": { "description": "Faq not found" } },
        "tags": ["faqs"]
      }
    },
    "/delivery-methods": {
      "get": {
        "operationId": "getDeliveryMethods",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List all delivery methods",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/DeliveryMethod" } }
              }
            }
          }
        },
        "tags": ["delivery methods"]
      },
      "post": {
        "operationId": "createDeliveryMethod",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeliveryMethodDto" } } }
        },
        "responses": {
          "201": {
            "description": "Delivery method created",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeliveryMethod" } } }
          },
          "400": { "description": "Invalid delivery method data" }
        },
        "tags": ["delivery methods"]
      }
    },
    "/delivery-methods/{id}": {
      "put": {
        "operationId": "updateDeliveryMethod",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeliveryMethodDto" } } }
        },
        "responses": {
          "200": {
            "description": "Delivery method updated",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeliveryMethod" } } }
          },
          "400": { "description": "Invalid delivery method data" },
          "404": { "description": "Delivery method not found" }
        },
        "tags": ["delivery methods"]
      },
      "delete": {
        "operationId": "deleteDeliveryMethod",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "responses": {
          "200": { "description": "Delivery method deleted" },
          "404": { "description": "Delivery method not found" }
        },
        "tags": ["delivery methods"]
      }
    },
    "/payment-methods": {
      "get": {
        "operationId": "getPaymentMethods",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List all payment methods",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/PaymentMethod" } }
              }
            }
          }
        },
        "tags": ["payment methods"]
      },
      "post": {
        "operationId": "createPaymentMethod",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PaymentMethodDto" } } }
        },
        "responses": {
          "201": {
            "description": "Payment method created",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PaymentMethod" } } }
          },
          "400": { "description": "Invalid payment method data" }
        },
        "tags": ["payment methods"]
      }
    },
    "/payment-methods/{id}": {
      "put": {
        "operationId": "updatePaymentMethod",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PaymentMethodDto" } } }
        },
        "responses": {
          "200": {
            "description": "Payment method updated",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PaymentMethod" } } }
          },
          "400": { "description": "Invalid payment method data" },
          "404": { "description": "Payment method not found" }
        },
        "tags": ["payment methods"]
      },
      "delete": {
        "operationId": "deletePaymentMethod",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "responses": {
          "200": { "description": "Payment method deleted" },
          "404": { "description": "Payment method not found" }
        },
        "tags": ["payment methods"]
      }
    },
    "/orders": {
      "post": {
        "operationId": "createOrder",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OrderCreateDto" } } }
        },
        "responses": {
          "201": {
            "description": "Order created",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Order" } } }
          },
          "400": { "description": "Invalid order data" },
          "404": { "description": "Product not found" }
        },
        "tags": ["orders"]
      },
      "get": {
        "operationId": "getOrders",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all orders",
            "content": {
              "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Order" } } }
            }
          }
        },
        "tags": ["orders"]
      }
    },
    "/orders/sales": {
      "get": {
        "operationId": "getSales",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all sales",
            "content": {
              "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Order" } } }
            }
          }
        },
        "tags": ["orders"]
      }
    },
    "/orders/my": {
      "get": {
        "operationId": "getUserOrders",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of current user's orders",
            "content": {
              "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Order" } } }
            }
          }
        },
        "tags": ["orders"]
      }
    },
    "/orders/{id}": {
      "get": {
        "operationId": "getOrder",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "responses": {
          "200": {
            "description": "Order with given id",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Order" } } }
          },
          "404": { "description": "Order not found" }
        },
        "tags": ["orders"]
      },
      "patch": {
        "operationId": "updateOrder",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OrderUpdateDto" } } }
        },
        "responses": {
          "200": {
            "description": "Order updated",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Order" } } }
          },
          "400": { "description": "Invalid order data" },
          "404": { "description": "Order not found" }
        },
        "tags": ["orders"]
      }
    },
    "/returns": {
      "get": {
        "operationId": "getReturns",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List all returns",
            "content": {
              "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Return" } } }
            }
          },
          "401": { "description": "User not logged in" },
          "403": { "description": "User not authorized" }
        },
        "tags": ["returns"]
      },
      "post": {
        "operationId": "createReturn",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ReturnCreateDto" } } }
        },
        "responses": {
          "201": {
            "description": "Return created",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Return" } } }
          },
          "400": { "description": "Invalid return data" },
          "401": { "description": "User not logged in" },
          "403": { "description": "User not authorized" }
        },
        "tags": ["returns"]
      }
    },
    "/returns/{id}": {
      "get": {
        "operationId": "getReturn",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "responses": {
          "200": {
            "description": "Return with given id",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Return" } } }
          },
          "401": { "description": "User not logged in" },
          "403": { "description": "User not authorized" },
          "404": { "description": "Return not found" }
        },
        "tags": ["returns"]
      },
      "patch": {
        "operationId": "updateReturn",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ReturnUpdateDto" } } }
        },
        "responses": {
          "200": {
            "description": "Return updated",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Return" } } }
          },
          "400": { "description": "Invalid return data" },
          "401": { "description": "User not logged in" },
          "403": { "description": "User not authorized" },
          "404": { "description": "Return not found" }
        },
        "tags": ["returns"]
      }
    },
    "/dashboard": {
      "get": {
        "operationId": "getDashboard",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Dashboard data",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DashboardState" } } }
          }
        }
      }
    },
    "/wishlists": {
      "get": {
        "operationId": "getUserWishlists",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User wishlists",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Wishlist" } }
              }
            }
          },
          "401": { "description": "User not logged in" },
          "403": { "description": "User not authorized" }
        },
        "tags": ["wishlists"]
      },
      "post": {
        "operationId": "createWishlist",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WishlistCreateDto" } } }
        },
        "responses": {
          "201": {
            "description": "Wishlist created",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Wishlist" } } }
          },
          "401": { "description": "User not logged in" },
          "403": { "description": "User not authorized" }
        },
        "tags": ["wishlists"]
      }
    },
    "/wishlists/{id}": {
      "patch": {
        "operationId": "updateWishlist",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WishlistUpdateDto" } } }
        },
        "responses": {
          "200": {
            "description": "Wishlist updated",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Wishlist" } } }
          },
          "401": { "description": "User not logged in" },
          "403": { "description": "User not authorized" },
          "404": { "description": "Wishlist not found" }
        },
        "tags": ["wishlists"]
      },
      "delete": {
        "operationId": "deleteWishlist",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "responses": {
          "200": { "description": "Wishlist deleted" },
          "401": { "description": "User not logged in" },
          "403": { "description": "User not authorized" },
          "404": { "description": "Wishlist not found" }
        },
        "tags": ["wishlists"]
      }
    },
    "/export": {
      "post": {
        "operationId": "export",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ExportDto" } } }
        },
        "responses": {
          "201": {
            "description": "Exported data",
            "content": {
              "application/json": { "schema": { "type": "string", "format": "binary" } },
              "application/gzip": { "schema": { "type": "string", "format": "binary" } },
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                "schema": { "type": "string", "format": "binary" }
              }
            }
          },
          "401": { "description": "User is not logged in" },
          "403": { "description": "User is not admin" }
        },
        "tags": ["import-export"]
      }
    },
    "/import": {
      "post": {
        "operationId": "import",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": { "type": "string", "format": "binary" },
                  "clear": { "type": "string", "nullable": true },
                  "noImport": { "type": "string", "nullable": true }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Import status",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ImportStatus" } } }
          },
          "401": { "description": "User is not logged in" },
          "403": { "description": "User is not admin" }
        },
        "tags": ["import-export"]
      }
    },
    "/pages": {
      "get": {
        "operationId": "getPages",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all pages",
            "content": {
              "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Page" } } }
            }
          }
        },
        "tags": ["pages"]
      },
      "post": {
        "operationId": "createPage",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PageCreateDto" } } }
        },
        "responses": {
          "201": {
            "description": "Page created",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Page" } } }
          },
          "400": { "description": "Invalid page data" },
          "401": { "description": "User is not logged in" },
          "403": { "description": "User is not admin" }
        },
        "tags": ["pages"]
      }
    },
    "/pages/groups": {
      "get": {
        "operationId": "getPageGroups",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all page groups",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/PageGroup" } }
              }
            }
          }
        },
        "tags": ["pages"]
      }
    },
    "/pages/{id}": {
      "get": {
        "operationId": "getPage",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "responses": {
          "200": {
            "description": "Page with given id",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Page" } } }
          },
          "404": { "description": "Page not found" }
        },
        "tags": ["pages"]
      },
      "patch": {
        "operationId": "updatePage",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PageUpdateDto" } } }
        },
        "responses": {
          "200": {
            "description": "Page updated",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Page" } } }
          },
          "400": { "description": "Invalid page data" },
          "401": { "description": "User is not logged in" },
          "403": { "description": "User is not admin" },
          "404": { "description": "Page not found" }
        },
        "tags": ["pages"]
      },
      "delete": {
        "operationId": "deletePage",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }],
        "responses": {
          "200": {
            "description": "Page deleted",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Page" } } }
          },
          "401": { "description": "User is not logged in" },
          "403": { "description": "User is not admin" },
          "404": { "description": "Page not found" }
        },
        "tags": ["pages"]
      }
    },
    "/carts/my": {
      "get": {
        "operationId": "getCart",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Current user/session cart",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Cart" } } }
          }
        },
        "tags": ["carts"]
      },
      "put": {
        "operationId": "updateCart",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CartDto" } } }
        },
        "responses": {
          "200": {
            "description": "Updated cart",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Cart" } } }
          }
        },
        "tags": ["carts"]
      }
    }
  },
  "info": { "title": "E-commerce platform API", "description": "", "version": "1.4.22", "contact": {} },
  "tags": [],
  "servers": [],
  "components": {
    "schemas": {
      "RegisterDto": {
        "type": "object",
        "properties": {
          "email": { "type": "string" },
          "password": { "type": "string", "minLength": 8 },
          "firstName": { "type": "string" },
          "lastName": { "type": "string" }
        },
        "required": ["email", "password"]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "registered": { "format": "date-time", "type": "string" },
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "email": { "type": "string" },
          "role": { "enum": ["customer", "sales", "shoper", "manager", "admin", "disabled"], "type": "string" }
        },
        "required": ["id", "registered", "email", "role"]
      },
      "SendVerificationCodeDto": {
        "type": "object",
        "properties": { "email": { "type": "string" }, "code": { "type": "string" } },
        "required": ["email"]
      },
      "LoginDto": {
        "type": "object",
        "properties": { "email": { "type": "string" }, "password": { "type": "string" } },
        "required": ["email", "password"]
      },
      "PickTypeClass": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "firstName": { "type": "string" },
          "email": { "type": "string" },
          "role": { "type": "string", "enum": ["customer", "sales", "shoper", "manager", "admin", "disabled"] }
        },
        "required": ["id", "email", "role"]
      },
      "UserUpdateDto": {
        "type": "object",
        "properties": {
          "email": { "type": "string" },
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "role": { "type": "string", "enum": ["customer", "sales", "shoper", "manager", "admin", "disabled"] }
        }
      },
      "Code": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "createdAt": { "format": "date-time", "type": "string" },
          "email": { "type": "string" },
          "code": { "type": "string" },
          "expiresAt": { "format": "date-time", "type": "string" },
          "visible": { "type": "boolean" }
        },
        "required": ["id", "createdAt", "email", "code", "expiresAt", "visible"]
      },
      "CodeUpdateDto": {
        "type": "object",
        "properties": {
          "email": { "type": "string" },
          "code": { "type": "string" },
          "expiresAt": { "type": "string" },
          "visible": { "type": "boolean" }
        }
      },
      "Setting": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "updated": { "format": "date-time", "type": "string" },
          "builtin": { "type": "boolean" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "type": {
            "enum": ["boolean", "number", "string", "currencyCode", "currenciesList", "country", "countriesList"],
            "type": "string"
          },
          "defaultValue": { "type": "string" },
          "value": { "type": "string" }
        },
        "required": ["id", "updated", "builtin", "name", "type", "defaultValue", "value"]
      },
      "SettingCreateDto": {
        "type": "object",
        "properties": {
          "builtin": { "type": "boolean", "default": false },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "type": {
            "type": "string",
            "enum": ["boolean", "number", "string", "currencyCode", "currenciesList", "country", "countriesList"]
          },
          "defaultValue": { "type": "string" },
          "value": { "type": "string" }
        },
        "required": ["name", "type", "defaultValue"]
      },
      "SettingUpdateDto": { "type": "object", "properties": { "value": { "type": "string" } }, "required": ["value"] },
      "ProductPhoto": {
        "type": "object",
        "properties": {
          "product": { "$ref": "#/components/schemas/Product" },
          "id": { "type": "number" },
          "path": { "type": "string" },
          "mimeType": { "type": "string" },
          "thumbnailPath": { "type": "string" },
          "placeholderBase64": { "type": "string" }
        },
        "required": ["product", "id", "path", "mimeType", "thumbnailPath", "placeholderBase64"]
      },
      "ProductRatingPhoto": {
        "type": "object",
        "properties": {
          "productRating": { "$ref": "#/components/schemas/ProductRating" },
          "id": { "type": "number" },
          "path": { "type": "string" },
          "mimeType": { "type": "string" },
          "thumbnailPath": { "type": "string" },
          "placeholderBase64": { "type": "string" }
        },
        "required": ["productRating", "id", "path", "mimeType", "thumbnailPath", "placeholderBase64"]
      },
      "ProductRating": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "created": { "format": "date-time", "type": "string" },
          "updated": { "format": "date-time", "type": "string" },
          "user": { "$ref": "#/components/schemas/User" },
          "product": { "$ref": "#/components/schemas/Product" },
          "rating": { "type": "number" },
          "comment": { "type": "string" },
          "photos": { "type": "array", "items": { "$ref": "#/components/schemas/ProductRatingPhoto" } }
        },
        "required": ["id", "created", "updated", "user", "product", "rating", "photos"]
      },
      "ShopItem": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "shop": { "$ref": "#/components/schemas/Shop" },
          "product": { "$ref": "#/components/schemas/Product" }
        },
        "required": ["id", "shop", "product"]
      },
      "Shop": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "created": { "format": "date-time", "type": "string" },
          "updated": { "format": "date-time", "type": "string" },
          "user": { "$ref": "#/components/schemas/User" },
          "products": { "type": "array", "items": { "$ref": "#/components/schemas/ShopItem" } },
          "shopName": { "type": "string" },
          "alvara": { "type": "string" },
          "nif": { "type": "string" },
          "contactPhone": { "type": "string" },
          "address": { "type": "string" }
        },
        "required": ["id", "created", "updated", "products", "shopName", "alvara", "nif", "contactPhone"]
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "created": { "format": "date-time", "type": "string" },
          "updated": { "format": "date-time", "type": "string" },
          "name": { "type": "string" },
          "price": { "type": "number" },
          "visible": { "type": "boolean" },
          "description": { "type": "string" },
          "stock": { "type": "number" },
          "attributes": { "type": "array", "items": { "$ref": "#/components/schemas/Attribute" } },
          "photos": { "type": "array", "items": { "$ref": "#/components/schemas/ProductPhoto" } },
          "photosOrder": { "type": "string" },
          "comission": { "type": "number" },
          "ratings": { "type": "array", "items": { "$ref": "#/components/schemas/ProductRating" } },
          "shop": { "$ref": "#/components/schemas/Shop" },
          "shopId": { "type": "number" }
        },
        "required": [
          "id",
          "created",
          "updated",
          "name",
          "price",
          "visible",
          "description",
          "stock",
          "attributes",
          "photos",
          "photosOrder",
          "comission",
          "ratings",
          "shop",
          "shopId"
        ]
      },
      "AttributeType": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "name": { "type": "string" },
          "valueType": { "enum": ["string", "number", "boolean", "color"], "type": "string" },
          "attributes": { "type": "array", "items": { "$ref": "#/components/schemas/Attribute" } }
        },
        "required": ["id", "name", "valueType", "attributes"]
      },
      "Attribute": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "product": { "$ref": "#/components/schemas/Product" },
          "value": { "type": "string" },
          "type": { "$ref": "#/components/schemas/AttributeType" }
        },
        "required": ["id", "product", "value", "type"]
      },
      "AttributeTypeDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "valueType": { "enum": ["string", "number", "boolean", "color"], "type": "string" }
        },
        "required": ["name", "valueType"]
      },
      "CategoryGroup": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "name": { "type": "string" },
          "categories": { "type": "array", "items": { "$ref": "#/components/schemas/Category" } }
        },
        "required": ["id", "name", "categories"]
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "slug": { "type": "string" },
          "service_fee": { "type": "number" },
          "parentCategory": { "$ref": "#/components/schemas/Category" },
          "childCategories": { "type": "array", "items": { "$ref": "#/components/schemas/Category" } },
          "groups": { "type": "array", "items": { "$ref": "#/components/schemas/CategoryGroup" } },
          "products": { "type": "array", "items": { "$ref": "#/components/schemas/Product" } }
        },
        "required": ["id", "name", "description", "service_fee", "childCategories", "groups", "products"]
      },
      "CategoryCreateDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" },
          "slug": { "type": "string" },
          "service_fee": { "type": "number", "minimum": 0 },
          "parentCategoryId": { "type": "number" }
        },
        "required": ["name", "description"]
      },
      "CategoryGroupDto": { "type": "object", "properties": { "name": { "type": "string" } }, "required": ["name"] },
      "CategoryUpdateDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" },
          "slug": { "type": "string" },
          "service_fee": { "type": "number", "minimum": 0 },
          "parentCategoryId": { "type": "number" },
          "groups": { "type": "array", "items": { "$ref": "#/components/schemas/CategoryGroupDto" } }
        }
      },
      "ProductCreateDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "price": { "type": "number", "minimum": 0 },
          "visible": { "type": "boolean" },
          "description": { "type": "string" },
          "stock": { "type": "number", "minimum": 0 },
          "comission": { "type": "number", "minimum": 0 },
          "shopId": { "type": "number" }
        },
        "required": ["name", "price", "description", "stock", "comission"]
      },
      "ProductUpdateDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "price": { "type": "number", "minimum": 0 },
          "visible": { "type": "boolean" },
          "description": { "type": "string" },
          "stock": { "type": "number", "minimum": 0 },
          "comission": { "type": "number", "minimum": 0 },
          "photosOrder": { "type": "string" },
          "shopId": { "type": "number" }
        }
      },
      "AttributeDto": {
        "type": "object",
        "properties": { "value": { "type": "string" }, "typeId": { "type": "number" } },
        "required": ["value", "typeId"]
      },
      "ShopItemDto": {
        "type": "object",
        "properties": { "productId": { "type": "number" }, "quantity": { "type": "number", "minimum": 1 } },
        "required": ["productId", "quantity"]
      },
      "ShopCreateDto": {
        "type": "object",
        "properties": {
          "products": { "type": "array", "items": { "$ref": "#/components/schemas/ShopItemDto" } },
          "shopName": { "type": "string" },
          "alvara": { "type": "string" },
          "nif": { "type": "string" },
          "contactPhone": { "type": "string" },
          "address": { "type": "string" },
          "email": { "type": "string" },
          "password": { "type": "string" }
        },
        "required": ["products", "shopName", "alvara", "nif", "contactPhone", "email", "password"]
      },
      "ShopUpdateDto": {
        "type": "object",
        "properties": {
          "products": { "type": "array", "items": { "$ref": "#/components/schemas/ShopItemDto" } },
          "shopName": { "type": "string" },
          "alvara": { "type": "string" },
          "nif": { "type": "string" },
          "contactPhone": { "type": "string" },
          "address": { "type": "string" }
        }
      },
      "ProductRatingDto": {
        "type": "object",
        "properties": { "rating": { "type": "number", "maximum": 5, "minimum": 1 }, "comment": { "type": "string" } },
        "required": ["rating"]
      },
      "Faq": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "created": { "format": "date-time", "type": "string" },
          "updated": { "format": "date-time", "type": "string" },
          "question": { "type": "string" },
          "visible": { "type": "boolean" },
          "answer": { "type": "string" }
        },
        "required": ["id", "created", "updated", "question", "visible", "answer"]
      },
      "FaqCreateDto": {
        "type": "object",
        "properties": {
          "question": { "type": "string" },
          "visible": { "type": "boolean" },
          "answer": { "type": "string" }
        },
        "required": ["question", "answer"]
      },
      "FaqUpdateDto": {
        "type": "object",
        "properties": {
          "question": { "type": "string" },
          "visible": { "type": "boolean" },
          "answer": { "type": "string" }
        }
      },
      "DeliveryMethod": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "price": { "type": "number" }
        },
        "required": ["id", "name", "description", "price"]
      },
      "DeliveryMethodDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" },
          "price": { "type": "number" }
        },
        "required": ["name", "description", "price"]
      },
      "PaymentMethod": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "price": { "type": "number" }
        },
        "required": ["id", "name", "description", "price"]
      },
      "PaymentMethodDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" },
          "price": { "type": "number" }
        },
        "required": ["name", "description", "price"]
      },
      "OrderItemDto": {
        "type": "object",
        "properties": { "productId": { "type": "number" }, "quantity": { "type": "number", "minimum": 1 } },
        "required": ["productId", "quantity"]
      },
      "OrderDeliveryDto": {
        "type": "object",
        "properties": {
          "methodId": { "type": "number" },
          "deliveryStatus": { "type": "string" },
          "address": { "type": "string" },
          "city": { "type": "string" },
          "postalCode": { "type": "string" },
          "country": { "type": "string" }
        },
        "required": ["methodId", "address", "city", "country"]
      },
      "OrderPaymentDto": {
        "type": "object",
        "properties": { "methodId": { "type": "number" }, "paymentStatus": { "type": "string" } },
        "required": ["methodId"]
      },
      "OrderCreateDto": {
        "type": "object",
        "properties": {
          "items": { "type": "array", "items": { "$ref": "#/components/schemas/OrderItemDto" } },
          "fullName": { "type": "string" },
          "contactEmail": { "type": "string" },
          "contactPhone": { "type": "string" },
          "message": { "type": "string" },
          "delivery": { "$ref": "#/components/schemas/OrderDeliveryDto" },
          "payment": { "$ref": "#/components/schemas/OrderPaymentDto" }
        },
        "required": ["items", "fullName", "contactEmail", "contactPhone", "delivery", "payment"]
      },
      "OrderDelivery": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "order": { "$ref": "#/components/schemas/Order" },
          "method": { "$ref": "#/components/schemas/DeliveryMethod" },
          "deliveryStatus": { "type": "string" },
          "address": { "type": "string" },
          "city": { "type": "string" },
          "postalCode": { "type": "string" },
          "country": { "type": "string" }
        },
        "required": ["id", "order", "method", "deliveryStatus", "address", "city", "country"]
      },
      "OrderPayment": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "order": { "$ref": "#/components/schemas/Order" },
          "method": { "$ref": "#/components/schemas/PaymentMethod" },
          "paymentStatus": { "type": "string" }
        },
        "required": ["id", "order", "method", "paymentStatus"]
      },
      "Return": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "created": { "format": "date-time", "type": "string" },
          "updated": { "format": "date-time", "type": "string" },
          "order": { "$ref": "#/components/schemas/Order" },
          "message": { "type": "string" },
          "status": { "enum": ["open", "accepted", "rejected", "cancelled", "completed"], "type": "string" }
        },
        "required": ["id", "created", "updated", "order", "status"]
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "created": { "format": "date-time", "type": "string" },
          "updated": { "format": "date-time", "type": "string" },
          "user": { "$ref": "#/components/schemas/User" },
          "items": { "type": "array", "items": { "$ref": "#/components/schemas/OrderItem" } },
          "status": {
            "enum": ["pending", "failed", "confirmed", "open", "cancelled", "delivered", "refunded"],
            "type": "string"
          },
          "delivery": { "$ref": "#/components/schemas/OrderDelivery" },
          "payment": { "$ref": "#/components/schemas/OrderPayment" },
          "fullName": { "type": "string" },
          "contactEmail": { "type": "string" },
          "contactPhone": { "type": "string" },
          "message": { "type": "string" },
          "return": { "$ref": "#/components/schemas/Return" }
        },
        "required": [
          "id",
          "created",
          "updated",
          "items",
          "status",
          "delivery",
          "payment",
          "fullName",
          "contactEmail",
          "contactPhone"
        ]
      },
      "OrderItem": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "order": { "$ref": "#/components/schemas/Order" },
          "product": { "$ref": "#/components/schemas/Product" },
          "quantity": { "type": "number" },
          "price": { "type": "number" }
        },
        "required": ["id", "order", "product", "quantity", "price"]
      },
      "OrderUpdateDto": {
        "type": "object",
        "properties": {
          "items": { "type": "array", "items": { "$ref": "#/components/schemas/OrderItemDto" } },
          "fullName": { "type": "string" },
          "contactEmail": { "type": "string" },
          "contactPhone": { "type": "string" },
          "message": { "type": "string" },
          "status": {
            "type": "string",
            "enum": ["pending", "failed", "confirmed", "open", "cancelled", "delivered", "refunded"]
          },
          "delivery": { "$ref": "#/components/schemas/OrderDeliveryDto" },
          "payment": { "$ref": "#/components/schemas/OrderPaymentDto" }
        }
      },
      "ReturnCreateDto": {
        "type": "object",
        "properties": { "orderId": { "type": "number" }, "message": { "type": "string" } },
        "required": ["orderId", "message"]
      },
      "ReturnUpdateDto": {
        "type": "object",
        "properties": {
          "message": { "type": "string" },
          "status": { "type": "string", "enum": ["open", "accepted", "rejected", "cancelled", "completed"] }
        }
      },
      "DashboardState": {
        "type": "object",
        "properties": {
          "confirmedToday": { "type": "number" },
          "confirmedOrderWeek": { "type": "number" },
          "completedDeliveriesWeek": { "type": "number" },
          "newUsers": { "type": "number" },
          "totalSales": { "type": "number" },
          "lowStockProductsCount": { "type": "number" }
        },
        "required": [
          "confirmedToday",
          "confirmedOrderWeek",
          "completedDeliveriesWeek",
          "newUsers",
          "totalSales",
          "lowStockProductsCount"
        ]
      },
      "Wishlist": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "created": { "format": "date-time", "type": "string" },
          "updated": { "format": "date-time", "type": "string" },
          "name": { "type": "string" },
          "user": { "$ref": "#/components/schemas/User" },
          "products": { "type": "array", "items": { "$ref": "#/components/schemas/Product" } }
        },
        "required": ["id", "created", "updated", "name", "user", "products"]
      },
      "WishlistCreateDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "productIds": { "type": "array", "items": { "type": "number" } }
        },
        "required": ["name", "productIds"]
      },
      "WishlistUpdateDto": {
        "type": "object",
        "properties": { "name": { "type": "string" }, "productIds": { "type": "array", "items": { "type": "number" } } }
      },
      "ExportDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "settings",
                "pages",
                "users",
                "attributeTypes",
                "products",
                "productPhotos",
                "categories",
                "wishlists",
                "deliveryMethods",
                "paymentMethods",
                "orders",
                "returns"
              ]
            }
          },
          "format": { "type": "string", "enum": ["json", "csv", "xlsx"] }
        },
        "required": ["data", "format"]
      },
      "ImportStatus": { "type": "object", "properties": {} },
      "Page": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "created": { "format": "date-time", "type": "string" },
          "updated": { "format": "date-time", "type": "string" },
          "title": { "type": "string" },
          "slug": { "type": "string" },
          "content": { "type": "string" },
          "groups": { "type": "array", "items": { "$ref": "#/components/schemas/PageGroup" } }
        },
        "required": ["id", "created", "updated", "title", "slug", "content", "groups"]
      },
      "PageGroup": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "name": { "type": "string" },
          "pages": { "type": "array", "items": { "$ref": "#/components/schemas/Page" } }
        },
        "required": ["id", "name", "pages"]
      },
      "PageCreateDto": {
        "type": "object",
        "properties": { "title": { "type": "string" }, "slug": { "type": "string" }, "content": { "type": "string" } },
        "required": ["title", "content"]
      },
      "PageGroupDto": { "type": "object", "properties": { "name": { "type": "string" } }, "required": ["name"] },
      "PageUpdateDto": {
        "type": "object",
        "properties": {
          "title": { "type": "string" },
          "slug": { "type": "string" },
          "content": { "type": "string" },
          "groups": { "type": "array", "items": { "$ref": "#/components/schemas/PageGroupDto" } }
        }
      },
      "Cart": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "updated": { "format": "date-time", "type": "string" },
          "user": { "$ref": "#/components/schemas/User" },
          "sessionId": { "type": "string" },
          "items": { "type": "array", "items": { "$ref": "#/components/schemas/CartItem" } }
        },
        "required": ["id", "updated", "items"]
      },
      "CartItem": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "cart": { "$ref": "#/components/schemas/Cart" },
          "product": { "$ref": "#/components/schemas/Product" },
          "quantity": { "type": "number" }
        },
        "required": ["id", "cart", "product", "quantity"]
      },
      "CartItemDto": {
        "type": "object",
        "properties": { "productId": { "type": "number" }, "quantity": { "type": "number", "minimum": 1 } },
        "required": ["productId", "quantity"]
      },
      "CartDto": {
        "type": "object",
        "properties": { "items": { "type": "array", "items": { "$ref": "#/components/schemas/CartItemDto" } } },
        "required": ["items"]
      }
    }
  }
}
